package com.eharmony.aloha.dataset.cli

import java.io._

import com.eharmony.aloha.FileLocations
import com.eharmony.aloha.io.StringReadable
import org.apache.commons.vfs2.VFS
import org.junit.Assert._
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.BlockJUnit4ClassRunner

import scala.language.implicitConversions

/**
 * Not testing STDIN here.  It hangs in IDE due to lack of test isolation.
 */
@RunWith(classOf[BlockJUnit4ClassRunner])
class DatasetCliTest {

    @Test def testCsvInVwOut(): Unit = {
        val inFile = "tmp:csvInVwOut.in"
        val outFile = "tmp:csvInVwOut.out"

        input(inFile,
            "MALE,205,stuff|things,,",
            "FEMALE,115,,,"
        )

        val expected = Seq(
            "| gender=MALE weight=200 num_likes=2",
            "| gender=FEMALE weight=110 num_likes=0"
        ).mkString("\n")

        val args = Array[String](
            "-i", inFile,
            "-s", "res:com/eharmony/aloha/dataset/cli/csv_spec1.js",
            "-c", "res:com/eharmony/aloha/dataset/cli/csv_types1.js",
            "--cachedir", FileLocations.testGeneratedClasses.getCanonicalPath,
            "--vw", outFile
        )

        DatasetCli.main(args)
        assertEquals(expected, output(outFile).trim)
    }

    @Test def testProtoInVwOut(): Unit = {
        val inFile = "tmp:protoInVwOut.in"
        val outFile = "tmp:protoInVwOut.out"

        // These were generated by the src/test/resources/test-protos.jar.
        input(inFile,
            "CAESBEFsYW4YASUAALhBKg0IARABGQAAAAAAAPA/Kg0IAhACGQAAAAAAAABA",
            "CAESBEthdGUYAioNCAMQAxkAAAAAAAAIQA=="
        )

        val expected = Seq(
            "| name=Alan gender=MALE bmi:23 num_photos:2",
            "| name=Kate gender=FEMALE bmi=UNK num_photos"
        ).mkString("\n")

        val args = Array[String](
            "-i", inFile,
            "-s", "res:com/eharmony/aloha/dataset/cli/proto_spec1.js",
            "-p", "com.eharmony.aloha.test.proto.Testing.UserProto",
            "--cachedir", FileLocations.testGeneratedClasses.getCanonicalPath,
            "--vw", outFile
        )

        DatasetCli.main(args)
        assertEquals(expected, output(outFile).trim)
    }

    @Test def testCsvInCsvOut(): Unit = {
        val inFile = "tmp:csvInCsvOut.in"
        val outFile = "tmp:csvInCsvOut.out"

        input(inFile,
            "MALE,175,,,",
            "FEMALE,,books|films|chinese food,,"
        )

        val expected = Seq(
            "MALE,170,0",
            "FEMALE,NULL,3"
        ).mkString("\n")

        val args = Array[String](
            "-i", inFile,
            "-s", "res:com/eharmony/aloha/dataset/cli/csv_spec2.js",
            "-c", "res:com/eharmony/aloha/dataset/cli/csv_types1.js",
            "--cachedir", FileLocations.testGeneratedClasses.getCanonicalPath,
            "--csv", outFile
        )

        DatasetCli.main(args)
        assertEquals(expected, output(outFile).trim)
    }

    def input(vfsUrl: String, data: String*): Unit = {
        val content = VFS.getManager.resolveFile(vfsUrl).getContent
        new OutputStreamWriter(content.getOutputStream).append(data.mkString("\n")).close()
    }

    def output(vfsUrl: String) = StringReadable.fromVfs2(VFS.getManager.resolveFile(vfsUrl))
}
