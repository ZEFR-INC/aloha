/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-05-12T10:28:16.122-07:00
  3.8.2.3

  Standalone prediction code with sample test data for DRFModel named DRF_model_1463074092542_1

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http:/localhost/127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http:/localhost/127.0.0.1:54321/3/Models.java/DRF_model_1463074092542_1 > DRF_model_1463074092542_1.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DRF_model_1463074092542_1.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DRF_model_1463074092542_1", algorithm="drf")
public class DRF_model_1463074092542_1 extends GenModel {
    public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }

    public boolean isSupervised() { return true; }
    public int nfeatures() { return 1; }
    public int nclasses() { return 1; }

    // Names of columns used by model.
    public static final String[] NAMES = NamesHolder_DRF_model_1463074092542_1.VALUES;

    // Column domains. The last array contains domain of response column.
    public static final String[][] DOMAINS = new String[][] {
    /* bmi */ null,
    /* label */ null
    };
    // Prior class distribution
    public static final double[] PRIOR_CLASS_DISTRIB = {1.0};
    // Class distribution used for model building
    public static final double[] MODEL_CLASS_DISTRIB = {1.0};

    public DRF_model_1463074092542_1() { super(NAMES,DOMAINS); }
    public String getUUID() { return Long.toString(4986774447208078661L); }

    // Pass in data in a double[], pre-aligned to the Model's requirements.
    // Jam predictions into the preds[] array; preds[0] is reserved for the
    // main prediction (class for classifiers or value for regression),
    // and remaining columns hold a probability distribution for classifiers.
    public final double[] score0( double[] data, double[] preds ) {
        java.util.Arrays.fill(preds,0);
        DRF_model_1463074092542_1_Forest_0.score0(data,preds);
        DRF_model_1463074092542_1_Forest_1.score0(data,preds);
        DRF_model_1463074092542_1_Forest_2.score0(data,preds);
        preds[0] /= 3;
        return preds;
    }
}
// The class representing training column names
class NamesHolder_DRF_model_1463074092542_1 implements java.io.Serializable {
    public static final String[] VALUES = new String[1];
    static {
        NamesHolder_DRF_model_1463074092542_1_0.fill(VALUES);
    }
    static final class NamesHolder_DRF_model_1463074092542_1_0 implements java.io.Serializable {
        static final void fill(String[] sa) {
            sa[0] = "bmi";
        }
    }
}

class DRF_model_1463074092542_1_Forest_0 {
    public static void score0(double[] fdata, double[] preds) {
        preds[0] += DRF_model_1463074092542_1_Tree_0_class_0.score0(fdata);
    }
}
class DRF_model_1463074092542_1_Tree_0_class_0 {
    static final double score0(double[] data) {
        double pred =  (data[0] <19.0f ? 1.0f : 0.0f);
        return pred;
    }
}


class DRF_model_1463074092542_1_Forest_1 {
    public static void score0(double[] fdata, double[] preds) {
        preds[0] += DRF_model_1463074092542_1_Tree_1_class_0.score0(fdata);
    }
}
class DRF_model_1463074092542_1_Tree_1_class_0 {
    static final double score0(double[] data) {
        double pred =  (data[0] <19.0f ? 1.0f : 0.0f);
        return pred;
    }
}


class DRF_model_1463074092542_1_Forest_2 {
    public static void score0(double[] fdata, double[] preds) {
        preds[0] += DRF_model_1463074092542_1_Tree_2_class_0.score0(fdata);
    }
}
class DRF_model_1463074092542_1_Tree_2_class_0 {
    static final double score0(double[] data) {
        double pred =  (data[0] <19.0f ? 1.0f : 0.0f);
        return pred;
    }
}
